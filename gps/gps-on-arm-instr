Overview
#################################

The following need to be copied/installed to the drone in order to
interact with the gps receiver connected via the USB port near the
battery connectors on the drone

Copied:
---------------------------------
/usr/bin/gpsd

/usr/lib/libgps.so*

/usr/lib/libgpsd.so*

Installed:
---------------------------------
insmod pl2303.ko
       usbserial.ko

Assumptions
#################################

These instructions were written using Fedora 17/18.  No guarantee is
made for older versions of Fedora or other Linux variants

Package Requirements
#################################

The following instructions assume you have wget, scons, gcc,
python-devel, and glibc.i686 installed.  If you do not have them install
use the following command to install all of them
$ sudo yum install wget scons gcc python-devel glibc.i686 -y

Setting up the ARM cross compile toolchain
#################################

Following the instructions found at:
http://taghof.github.com/Navigation-for-Robots-with-WIFI-and-CV/blog/2012/01/13/Compiling-Code-For-The-ARDrone/

Download the setup file codesetup.sh from: http://taghof.github.com/Navigation-for-Robots-with-WIFI-and-CV/downloads/codesetup.sh

From the directory containing codesetup.sh
$ sudo sh codesetup.sh

The toolchain has now been installed.  To enter the cross compile environment
$ codesourcery-arm-2009q3.sh

I recommend making a bash alias for the above command

To exist the cross compile environment
$ exit
        
Generating the gpsd binaries and libraries
################################# 

The version of gpsd which has been tested on the drone is gpsd 3.8
which can be downloaded at:
http://download-mirror.savannah.gnu.org/releases/gpsd/

The main page for gpsd can be found at http://catb.org/gpsd/

Download, unpack, and navigate to the unpacked gpsd directory.

Copy the file scons-option-cache-arm from the
downloaded-resources/gpsd folder of this git repository to your gpsd
directory as .scons-option-cache

Make sure you are in the cross compile environment and build the gpsd
binaries and libraries
$ scons

If you need to clean the gpsd directory use
$ scons -c

Copy the newly generated binaries and libraries listed above from the
gpsd directory to the drone directories given above

Generating the USB to serial kernel objects
################################# 

Following the instructions provided at:
http://www.drone-rk.org/wiki/ARDrone#no1

Download the ARDrone linux kernel source from:
https://devzone.parrot.com/projects/list_files/oss-ardrone2
(linux.tar.gz)

Unpack and navigate to the kernel source top level directory

Copy the file config from the
downloaded-resources/ARDrone-Kernel-Source to the top level directory
as .config

Open up the top level Makefile and change EXTRAVERSION to be set to
'.9-g0d605ac'

Make sure you are in the cross compile environment
$ make modules

Copy the generated files pl2303.ko and usbserial.ko from
drivers/usb/serial to the drone

On the drone in the directory containing pl2303.ko and usbserial.ko
$ insmod usbserial.ko
$ insmod pl2303.ko

Building gps_test
#################################

Edit 'Makefile' in the gps directory so that the macro DIR points to
your local gpsd directory

From the gps directory of the git repository, make sure you are in the
cross compile environment
$ make

Copy gps_test to the drone

Receiving GPS data on the drone
#################################
Start gpsd
$ gpsd -N -D3 -F /var/run/gpsd.sock /dev/ttyUSB0 &

Execute gps_test
$ ./gps_test &

Note
#################################

If you need to kill gpsd
$ killall gpsd
$ rm /var/run/gpsd.sock
